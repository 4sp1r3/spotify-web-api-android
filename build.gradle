buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
        classpath 'org.robolectric:robolectric-gradle-plugin:1.1.0'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'org.robolectric'

repositories {
    jcenter()
}

archivesBaseName="spotify-web-api-android"
version="0.1.0"

android {

    compileSdkVersion 22
    buildToolsVersion '22.0.1'

    buildTypes {
        debug {
            testCoverageEnabled = true
        }
    }

    // make proper name for 'aar' file
    libraryVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.aar')) {
                def fileName = "${archivesBaseName}-${version}.aar"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }

    lintOptions {
        warning 'InvalidPackage'
    }
}

dependencies {
    compile('com.squareup.retrofit:retrofit:1.9.0') {
        transitive = true
    }
    compile('com.squareup.okhttp:okhttp:2.2.0') {
        transitive = true
    }

    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:2.4'
    testCompile 'org.mockito:mockito-core:1.9.5'
}

// todo(dima) please fix it
//task generateDocs(type: Javadoc) {
//    title = "Spotify Web API Android Client - API Reference"
//    destinationDir = file("./build/docs/")
//    source = sourceSets.main.allJava
//    classpath = configurations.compile
//
//    options.links("http://docs.oracle.com/javase/7/docs/api/");
//    options.links("http://square.github.io/retrofit/javadoc/");
//}


/* jacoco
    {`./gradlew check` generates report `build/reports/jacoco` }
*/

apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.7.1.201405082137"
}

def coverageSourceDirs = ['src/main/java' ]

task jacocoTestReport(type:JacocoReport, dependsOn: "testDebug") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: 'build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('build/jacoco/testDebug.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }

}
check.dependsOn jacocoTestReport
/* !jacoco */
